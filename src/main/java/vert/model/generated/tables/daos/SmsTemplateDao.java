/*
 * This file is generated by jOOQ.
 */
package vert.model.generated.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.async.AbstractAsyncVertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;

import vert.model.generated.tables.SmsTemplate;
import vert.model.generated.tables.records.SmsTemplateRecord;


import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.async.AsyncClassicQueryExecutor;
/**
 * 短信模板
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmsTemplateDao extends AbstractAsyncVertxDAO<SmsTemplateRecord, vert.model.generated.tables.pojos.SmsTemplate, Integer, Future<List<vert.model.generated.tables.pojos.SmsTemplate>>, Future<vert.model.generated.tables.pojos.SmsTemplate>, Future<Integer>, Future<Integer>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<SmsTemplateRecord,vert.model.generated.tables.pojos.SmsTemplate,Integer> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public SmsTemplateDao(Configuration configuration, io.vertx.ext.asyncsql.AsyncSQLClient delegate) {
        super(SmsTemplate.SMS_TEMPLATE, vert.model.generated.tables.pojos.SmsTemplate.class, new AsyncClassicQueryExecutor<SmsTemplateRecord,vert.model.generated.tables.pojos.SmsTemplate,Integer>(configuration,delegate,vert.model.generated.tables.pojos.SmsTemplate::new, SmsTemplate.SMS_TEMPLATE));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(vert.model.generated.tables.pojos.SmsTemplate object) {
        return object.getId();
    }

    /**
     * Find records that have <code>MCH_ID IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByMchId(List<String> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.MCH_ID.in(values));
    }

    /**
     * Find records that have <code>MCH_NAME IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByMchName(List<String> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.MCH_NAME.in(values));
    }

    /**
     * Find records that have <code>CREATED_TIME IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByCreatedTime(List<LocalDateTime> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.CREATED_TIME.in(values));
    }

    /**
     * Find records that have <code>UPDATE_TIME IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByUpdateTime(List<LocalDateTime> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.UPDATE_TIME.in(values));
    }

    /**
     * Find records that have <code>TEMP_NAME IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByTempName(List<String> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.TEMP_NAME.in(values));
    }

    /**
     * Find records that have <code>TEMP_CODE IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByTempCode(List<String> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.TEMP_CODE.in(values));
    }

    /**
     * Find a unique record that has <code>TEMP_CODE = value</code> asynchronously
     */
    public Future<vert.model.generated.tables.pojos.SmsTemplate> findOneByTempCode(String value) {
        return findOneByCondition(SmsTemplate.SMS_TEMPLATE.TEMP_CODE.eq(value));
    }

    /**
     * Find records that have <code>TEMP_TYPE IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByTempType(List<Integer> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.TEMP_TYPE.in(values));
    }

    /**
     * Find records that have <code>TEMP_SIGNATURE IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByTempSignature(List<String> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.TEMP_SIGNATURE.in(values));
    }

    /**
     * Find records that have <code>TEMP_SIGNATURE_TYPE IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByTempSignatureType(List<Integer> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.TEMP_SIGNATURE_TYPE.in(values));
    }

    /**
     * Find records that have <code>TEMP_CONTENT IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByTempContent(List<String> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.TEMP_CONTENT.in(values));
    }

    /**
     * Find records that have <code>REMARK IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByRemark(List<String> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.REMARK.in(values));
    }

    /**
     * Find records that have <code>TEMP_STATUS IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByTempStatus(List<Integer> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.TEMP_STATUS.in(values));
    }

    /**
     * Find records that have <code>ENABLED IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByEnabled(List<Integer> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.ENABLED.in(values));
    }

    /**
     * Find records that have <code>CHANNEL_ID IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByChannelId(List<String> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.CHANNEL_ID.in(values));
    }

    /**
     * Find records that have <code>CHANNEL_NAME IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByChannelName(List<String> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.CHANNEL_NAME.in(values));
    }

    /**
     * Find records that have <code>ACCEPT_TIME IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByAcceptTime(List<LocalDateTime> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.ACCEPT_TIME.in(values));
    }

    /**
     * Find records that have <code>ACCEPT_PERSON_CODE IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByAcceptPersonCode(List<String> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.ACCEPT_PERSON_CODE.in(values));
    }

    /**
     * Find records that have <code>ACCEPT_PERSON_NAME IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByAcceptPersonName(List<String> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.ACCEPT_PERSON_NAME.in(values));
    }

    /**
     * Find records that have <code>REVIEW_FAIL_RESON IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByReviewFailReson(List<String> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.REVIEW_FAIL_RESON.in(values));
    }

    /**
     * Find records that have <code>TEMP_CONTENT_TYPE IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.SmsTemplate>> findManyByTempContentType(List<Integer> values) {
        return findManyByCondition(SmsTemplate.SMS_TEMPLATE.TEMP_CONTENT_TYPE.in(values));
    }

    @Override
    public AsyncClassicQueryExecutor<SmsTemplateRecord,vert.model.generated.tables.pojos.SmsTemplate,Integer> queryExecutor(){
        return (AsyncClassicQueryExecutor<SmsTemplateRecord,vert.model.generated.tables.pojos.SmsTemplate,Integer>) super.queryExecutor();
    }

    @Override
    protected java.util.function.Function<Object,Integer> keyConverter(){
        return lastId -> Integer.valueOf(((io.vertx.core.json.JsonArray)lastId).getLong(0).intValue());
    }
}
