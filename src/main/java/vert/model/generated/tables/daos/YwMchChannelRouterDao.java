/*
 * This file is generated by jOOQ.
 */
package vert.model.generated.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.async.AbstractAsyncVertxDAO;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.Record2;

import vert.model.generated.tables.YwMchChannelRouter;
import vert.model.generated.tables.records.YwMchChannelRouterRecord;


import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.async.AsyncClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class YwMchChannelRouterDao extends AbstractAsyncVertxDAO<YwMchChannelRouterRecord, vert.model.generated.tables.pojos.YwMchChannelRouter, Record2<String, String>, Future<List<vert.model.generated.tables.pojos.YwMchChannelRouter>>, Future<vert.model.generated.tables.pojos.YwMchChannelRouter>, Future<Integer>, Future<Record2<String, String>>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<YwMchChannelRouterRecord,vert.model.generated.tables.pojos.YwMchChannelRouter,Record2<String, String>> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public YwMchChannelRouterDao(Configuration configuration, io.vertx.ext.asyncsql.AsyncSQLClient delegate) {
        super(YwMchChannelRouter.YW_MCH_CHANNEL_ROUTER, vert.model.generated.tables.pojos.YwMchChannelRouter.class, new AsyncClassicQueryExecutor<YwMchChannelRouterRecord,vert.model.generated.tables.pojos.YwMchChannelRouter,Record2<String, String>>(configuration,delegate,vert.model.generated.tables.pojos.YwMchChannelRouter::new, YwMchChannelRouter.YW_MCH_CHANNEL_ROUTER));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Record2<String, String> getId(vert.model.generated.tables.pojos.YwMchChannelRouter object) {
        return compositeKeyRecord(object.getMchId(), object.getBusinessType());
    }

    /**
     * Find records that have <code>CHANNEL_ID IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.YwMchChannelRouter>> findManyByChannelId(List<String> values) {
        return findManyByCondition(YwMchChannelRouter.YW_MCH_CHANNEL_ROUTER.CHANNEL_ID.in(values));
    }

    /**
     * Find records that have <code>CHANNEL_NAME IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.YwMchChannelRouter>> findManyByChannelName(List<String> values) {
        return findManyByCondition(YwMchChannelRouter.YW_MCH_CHANNEL_ROUTER.CHANNEL_NAME.in(values));
    }

    /**
     * Find records that have <code>BUSINESS_TYPE IN (values)</code> asynchronously
     */
    public Future<List<vert.model.generated.tables.pojos.YwMchChannelRouter>> findManyByBusinessType(List<String> values) {
        return findManyByCondition(YwMchChannelRouter.YW_MCH_CHANNEL_ROUTER.BUSINESS_TYPE.in(values));
    }

    @Override
    public AsyncClassicQueryExecutor<YwMchChannelRouterRecord,vert.model.generated.tables.pojos.YwMchChannelRouter,Record2<String, String>> queryExecutor(){
        return (AsyncClassicQueryExecutor<YwMchChannelRouterRecord,vert.model.generated.tables.pojos.YwMchChannelRouter,Record2<String, String>>) super.queryExecutor();
    }
}
